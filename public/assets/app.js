angular.module("app",["ngRoute","ui.router","tc.chartjs","ui.bootstrap"]),angular.module("app").controller("ErrorCtrl",["$scope","$rootScope",function(e,o){e.hello="this is from the controller hello",console.log(e.hello)}]),angular.module("app").controller("HomeCtrl",["$scope","$http",function(e,o){e.model="",e.setup=function(){o.get("/api/companies/count").then(function(o){e.model.companies=o.data},function(e){console.log(e)}),o.get("/api/stockists/count").then(function(o){e.model.stockists=o.data},function(e){console.log(e)}),o.get("/api/employees/count").then(function(o){e.model.employees=o.data},function(e){console.log(e)})},e.setup(),e.data=[{value:50,color:"#F7464A",highlight:"#FF5A5E",label:"Companies"},{value:20,color:"#46BFBD",highlight:"#5AD3D1",label:"Stockists"},{value:6,color:"#FFFF00",highlight:"#e5e500",label:"Employees"}],e.options={responsive:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="tc-chart-js-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(e,o,t){e.login=function(n,l){o.login(n,l).then(function(o){console.log("printing response"),console.log(o.data),e.$emit("login",o.data),t.path("/home")})}}]),angular.module("app").controller("masterCtrl",["$scope","$rootScope","$route",function(e,o,t){console.log("masterCtrl"),e.$on("login",function(t,n){console.log("Logged In"),e.currentUser=n,o.currentUser=n,localStorage.setItem("logged_user",o.currentUser.username)})}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(e,o){o.fetch().success(function(o){e.posts=o}),e.addPost=function(){e.postBody&&o.create({body:e.postBody}).success(function(o){e.postBody=null})},e.$on("ws:new_post",function(o,t){e.$apply(function(){e.posts.unshift(t)})})}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/posts")},this.create=function(o){return e.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(e,o,t){e.register=function(n,l,c){o.register(n,l,c).then(function(o){e.$emit("login",o.data),t.path("/home")})["catch"](function(e){console.log(e)})}}]),angular.module("app").service("segment",["$http","$window","$location",function(e,o,t){return{getData:function(e,o){return console.log("here"),2}}}]),angular.module("app").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,o,t){o.otherwise("/"),e.state("app",{url:"/",views:{header:{templateUrl:"/nav.html"},content:{templateUrl:"/login.html",controller:"LoginCtrl"}}}).state("app.login",{url:"login",views:{header:{templateUrl:"/nav.html"},content:{templateUrl:"/login.html",controller:"LoginCtrl"}}}).state("app.register",{url:"register",views:{"content@":{templateUrl:"register.html",controller:"RegisterCtrl"}}}).state("app.home",{url:"home",views:{"content@":{templateUrl:"users/home.html",controller:"HomeCtrl"}}}).state("app.home.vehicles",{url:"/vehicles/new",views:{"content@":{templateUrl:"vehicles/newVehicle.html",controller:"VehiclesNewInfoCtrl"}}}).state("app.products",{url:"products",views:{"content@":{templateUrl:"products/products.html",controller:"productsCtrl"}}}).state("app.products.new",{url:"/new",views:{"content@":{templateUrl:"products/newProduct.html",controller:"newProductCtrl"}}}).state("app.products.details",{url:"/:id",views:{"content@":{templateUrl:"products/editProduct.html",controller:"editProductCtrl"}}}).state("app.companies",{url:"resources/companies",views:{"content@":{templateUrl:"resources/companies.html",controller:"companiesCtrl"}}}).state("app.companies.new",{url:"/new",views:{"content@":{templateUrl:"resources/newCompany.html",controller:"newCompanyCtrl"}}}).state("app.companies.details",{url:"/:id",views:{"content@":{templateUrl:"resources/editCompany.html",controller:"editCompanyCtrl"}}}).state("app.stockists",{url:"resources/stockists",views:{"content@":{templateUrl:"resources/stockists.html",controller:"stockistsCtrl"}}}).state("app.stockists.new",{url:"/new",views:{"content@":{templateUrl:"resources/newStockist.html",controller:"newStockistCtrl"}}}).state("app.employees",{url:"resources/employees",views:{"content@":{templateUrl:"resources/employees.html",controller:"employeesCtrl"}}}).state("app.employees.new",{url:"/new",views:{"content@":{templateUrl:"resources/newEmployee.html",controller:"newEmployeeCtrl"}}}).state("app.invoiceentry",{url:"sales/invoice-entry",views:{"content@":{templateUrl:"sales/invoiceEntry.html",controller:"invoiceEntryCtrl"}}}).state("app.billheader",{url:"sales/billheader",views:{"content@":{templateUrl:"sales/billHeader.html"}}}).state("app.salesreturn",{url:"sales/sales-return",views:{"content@":{templateUrl:"sales/salesReturn.html"}}}).state("app.purchaseentry",{url:"sales/purchase-entry",views:{"content@":{templateUrl:"purchase/purchaseEntry.html"}}}).state("app.settings",{url:"about",views:{"content@":{templateUrl:"settings/about.html",controller:"HomeCtrl"}}}),t.html5Mode(!0)}]),angular.module("app").service("UserSvc",["$http","$window","$location",function(e,o,t){var n=this;n.getUser=function(){return e.get("api/users")},n.login=function(l,c){return e.post("api/sessions",{username:l,password:c}).then(function(t){return n.token=t.data,o.sessionStorage.user_token=JSON.stringify(n.token),localStorage.setItem("user_token",JSON.stringify(n.token)),e.defaults.headers.common["x-auth"]=t.data,n.getUser()})["catch"](function(e){console.error("Gists error",e.status,e.data),t.path("/401")})["finally"](function(){console.log("finally finished gists")})},n.register=function(o,t,l){return e.post("api/users",{name:o,username:t,password:l}).then(function(e){return n.login(t,l)})}}]),angular.module("app").controller("companiesCtrl",["$scope","$http",function(e,o){e.setup=function(){o.get("/api/companies").then(function(o){e.model=o.data},function(e){})},e.setup(),e.deleteCompany=function(t){confirm("Are you sure?")&&o["delete"]("/api/companies/"+t).then(function(o){console.log(o),e.setup()},function(e){console.log(e)})}}]),angular.module("app").controller("editCompanyCtrl",["$scope","$http","$location","$stateParams",function(e,o,t,n){e.setup=function(){console.log(n),o.get("/api/companies/"+n.id).then(function(o){e.model=o.data,console.log(e.model)},function(e){console.log(e)})},e.updateCompanyDetails=function(){o.put("/api/companies/"+n.id,{company_code:e.model.company_code,company_name:e.model.company_name,company_areacode:e.model.company_areacode,company_address:e.model.company_address,company_openingbalance:e.model.company_openingbalance,company_bstcode:e.model.company_bstcode}).then(function(e){console.log(e)},function(e){console.log(e)})},e.setup()}]),angular.module("app").controller("employeesCtrl",["$scope","$http",function(e,o){e.setup=function(){o.get("/api/employees").then(function(o){e.model=o.data},function(e){})},e.setup()}]),angular.module("app").controller("newCompanyCtrl",["$scope","$http","$location",function(e,o,t){e.saveCompanyDetails=function(){console.log("Here in the company controller"),o.post("/api/companies",{company_code:e.company_code,company_name:e.company_name,company_areacode:e.company_areacode,company_address:e.company_address,company_openingbalance:e.company_openingbalance,company_bstcode:e.company_bstcode}).then(function(e){console.log(e),t.path("/resources/companies")},function(e){console.log(e)})}}]),angular.module("app").controller("newEmployeeCtrl",["$scope","$http","$location",function(e,o,t){e.saveEmployeeDetails=function(){console.log("Here in the Employee controller"),console.log(e.employee_code),o.post("/api/employees",{employee_code:e.employee_code,employee_name:e.employee_name,employee_areacode:e.employee_areacode,employee_address:e.employee_address,employee_openingbalance:e.employee_openingbalance,employee_bstcode:e.employee_bstcode}).then(function(e){console.log(e),t.path("/resources/employees")},function(e){console.log(e)})}}]),angular.module("app").controller("newStockistCtrl",["$scope","$http","$location",function(e,o,t){e.saveStockistDetails=function(){console.log("Here in the Stockist controller"),console.log(e.stockist_code),o.post("/api/stockists",{stockist_code:e.stockist_code,stockist_name:e.stockist_name,stockist_areacode:e.stockist_areacode,stockist_address:e.stockist_address,stockist_openingbalance:e.stockist_openingbalance,stockist_bstcode:e.stockist_bstcode}).then(function(e){console.log(e),t.path("/resources/stockists")},function(e){console.log(e)})}}]),angular.module("app").controller("stockistsCtrl",["$scope","$http",function(e,o){e.setup=function(){o.get("/api/stockists").then(function(o){e.model=o.data},function(e){})},e.setup()}]),angular.module("app").controller("VehiclesEditInfoCtrl",["$scope","$http","$location","$stateParams",function(e,o,t,n){e.setup=function(){console.log(n),o.get("/api/vehicle/"+n.id).then(function(o){e.model=o.data,console.log(e.model)},function(e){console.log(e)})},e.setup()}]),angular.module("app").controller("editProductCtrl",["$scope","$http","$location","$stateParams",function(e,o,t,n){e.setup=function(){console.log(n),o.get("/api/products/"+n.id).then(function(o){e.model=o.data,console.log(e.model)},function(e){console.log(e)})},e.updateProductDetails=function(){o.put("/api/products/"+n.id,{product_code:e.model.product_code,product_name:e.model.product_name,product_areacode:e.model.product_areacode,product_address:e.model.product_address,product_openingbalance:e.model.product_openingbalance,product_bstcode:e.model.product_bstcode}).then(function(e){console.log(e)},function(e){console.log(e)})},e.setup()}]),angular.module("app").controller("newProductCtrl",["$scope","$http","$location",function(e,o,t){e.saveProductDetails=function(){console.log("Here in the product controller"),o.post("/api/products",{product_code:e.product_code,product_name:e.product_name,product_packing:e.product_packing,product_company:e.product_company,product_salestax:e.product_salestax,product_discount:e.product_discount,product_boxsize:e.product_boxsize,product_purchase:e.product_purchase,product_mrp:e.product_mrp}).then(function(e){console.log(e),t.path("/products")},function(e){console.log(e)})},e.availableCompanies=function(){o.get("/api/companies").then(function(o){e.companies=_.map(o.data,function(e){return{name:e.company_name,address:e.company_address}}),console.log(e.companies)},function(e){console.log(e)})},e.setup=function(){e.availableCompanies()},e.setup()}]),angular.module("app").controller("productsCtrl",["$scope","$http",function(e,o){e.loading=!0,e.setup=function(){o.get("/api/products").then(function(o){e.model=o.data,e.loading=!1},function(e){})},e.setup()}]),angular.module("app").controller("VehiclesNewInfoCtrl",["$scope","$http","$location",function(e,o,t){e.saveVehicleDetails=function(){console.log("in controller 2"),console.log(e.dev_id+e.v_number),o.post("/api/vehicle",{dev_id:e.dev_id,v_number:e.v_number,driver_name:e.driver_name,sos_number:e.sos_number}).then(function(e){console.log(e),t.path("/home")},function(e){console.log(e)})}}]),angular.module("app").controller("invoiceEntryCtrl",["$scope","$http",function(e,o){e.model={},e.availableProducts=function(){o.get("/api/products").then(function(o){e.model.products=_.map(o.data,function(e){return{name:e.product_name,code:e.product_code}})},function(e){console.log(e)})},e.availableCompanies=function(){o.get("/api/companies").then(function(o){e.model.companies=_.map(o.data,function(e){return{name:e.company_name,address:e.company_address}}),console.log(e.model.companies)},function(e){console.log(e)})},e.setup=function(){e.availableProducts(),e.availableCompanies()},e.setup()}]);
//# sourceMappingURL=data:application/json;base64,
